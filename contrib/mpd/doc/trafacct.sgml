<!-- $Id: trafacct.sgml,v 1.6 2009/02/23 11:17:41 amotin Exp $ -->
<!-- mpd netgraph enabled user mode PPP daemon -->

<!-- <!DOCTYPE linuxdoc PUBLIC '-//FreeBSD//DTD linuxdoc//EN'> -->

  <sect><heading>Traffic accounting<label id="trafacct"></heading>

<p>

  Mpd supports several methods of traffic accounting:

<sect1><heading>NetFlow<label id="netflow"></heading>
<p>
  NetFlow is a protocol for exporting aggregated traffic information
  with UDP packets flow. NetFlow is generated by <tt>ng_netflow(4)</tt> node.
  To enable NetFlow on a particular interface <tt>netflow-in</tt> or
  <tt>netflow-out</tt> options should be used. Best practice is to enable
  netflow on every interface in system in only one direction:
  incoming for "ingress" flow or outgoing for "egress" flow.

  <bf>Note:</bf> Netflow configuration is global for the daemon, 
  so it must be done before first bundle get connected.

  <bf>Note:</bf> This feature is available only on FreeBSD 6.0-RELEASE
  and newer.

<descrip>

<tag><tt>
set netflow peer <em>ip</em> <em>port</em>
</tt></tag>

Set destination IP address and port, where NetFlow export datagrams
will be sent. This options is important to have working NetFlow.

<tag><tt>
set netflow self <em>ip</em> <em>port</em>
</tt></tag>

Set optional local IP and port binding, to make NetFlow datagrams
originate from a specific source.

<tag><tt>
set netflow timeouts <em>inactive</em> <em>active</em>
</tt></tag>

Modify inactive and active timeout values. For more information, see
<tt>ng_netflow(4)</tt> manual page.

<tag><tt>
set netflow node <em>nodename</em>
</tt></tag>

Use existing <tt>ng_netflow(4)</tt> node instead of creating a new one.

<tag><tt>
set netflow hook <em>number</em>
</tt></tag>

Use <tt>ng_netflow(4)</tt> node's hooks starting from specified number. 
For detailed information about naming of hooks, see <tt>ng_netflow(4)</tt>
manual page.

</descrip>

<sect1><heading>IP Accounting<label id="ipacct"></heading>
<p>
  IP Accounting accumulates traffic information in kernel buffer. This buffer
  can be periodically readed and flushed by some other program. IP Accounting
  implemented by <tt>ng_ipacct</tt> node. To enable IP Accounting on a
  particular interface <tt>ipacct</tt> options should be used.

<sect1><heading>Accounting Update</heading>
<p>
  Mpd provides summary traffic statistics in every accounting Update/Stop
  call of radius-acct or ext-acct.

  For radius-acct it provides such attributes:
<descrip>
<tag><tt>Acct-Input-Packets</tt></tag> 32bit input packets counter,
<tag><tt>Acct-Output-Packets</tt></tag> 32bit output packets counter,
<tag><tt>Acct-Input-Octets</tt></tag> lower 32bit of input bytes counter,
<tag><tt>Acct-Output-Octets</tt></tag> lower 32bit of output bytes counter,
<tag><tt>Acct-Input-Gigawords</tt></tag> higher 32bit of input bytes counter,
<tag><tt>Acct-Output-Gigawords</tt></tag> higher 32bit of output bytes counter.
</descrip>
  
  For ext-acct it provides:
<descrip>
<tag><tt>ACCT_INPUT_PACKETS</tt></tag> 64bit input packets counter,
<tag><tt>ACCT_OUTPUT_PACKETS</tt></tag> 64bit output packets counter,
<tag><tt>ACCT_INPUT_OCTETS</tt></tag> 64bit input bytes counter,
<tag><tt>ACCT_OUTPUT_OCTETS</tt></tag> 64bit output bytes counter.
</descrip>

  NOTE: as Accounting Update is implemented on a link layer it accounts
  traffic via single physical link (without link overhead). So it accounts
  traffic after compression, encryption and multilink were applied to it.

<sect1><heading>Typed Accounting Update</heading>
<p>
  In addition to standard Accounting Update stats, mpd is able to provide
  accounting information for any specified traffic types. Traffic types
  may be defined using optional third component of mpd-limit's left part.
  
  In accounting requests mpd can provide such attributes:
  for radius-acct:
<descrip>
<tag><tt>mpd-input-packets</tt></tag> traffic type : 64bit input packets counter,
<tag><tt>mpd-output-packets</tt></tag> traffic type : 64bit output packets counter,
<tag><tt>mpd-input-octets</tt></tag> traffic type : 64bit of input bytes counter,
<tag><tt>mpd-output-octets</tt></tag> traffic type : 64bit of output bytes counter,
</descrip>
  for ext-acct:
<descrip>
<tag><tt>MPD_INPUT_PACKETS</tt></tag> traffic type : 64bit input packets counter,
<tag><tt>MPD_OUTPUT_PACKETS</tt></tag> traffic type : 64bit output packets counter,
<tag><tt>MPD_INPUT_OCTETS</tt></tag> traffic type : 64bit input bytes counter,
<tag><tt>MPD_OUTPUT_OCTETS</tt></tag> traffic type : 64bit output bytes counter.
</descrip>
  
  NOTE: as Typed Accounting Update is implemented on interface layer instead
  of link as usual Accounting Update, same data will be reported for every
  link of multilink connection. Some special care should be taken by AAA
  to not account same traffic twice in multilink case.

  For example, specification:
<verb>
mpd-filter += "1#1=match dst net 10.0.0.0/8",
mpd-limit += "in#1#Local=flt1 pass",
mpd-limit += "in#2#Biz=all shape 64000 4000",
</verb>
  , or for ext-auth:
<verb>
MPD_FILTER:1#1=match dst net 10.0.0.0/8
MPD_LIMIT:in#1#Local=flt1 pass
MPD_LIMIT:in#2#Biz=all shape 64000 4000
</verb>
  will instruct mpd to account traffic of two types: "Local" and "Biz".
  Traffic going from client to the 10.0.0.0/8 network will be accounted
  as "Local", all other incoming traffic after shaping will be accounted as "Biz".
  In accounting request mpd will provide to RADIUS something like:
<verb>
mpd-input-packets = Local:213213
mpd-input-octets = Local:32132132
mpd-input-packets = Biz:21321
mpd-input-octets = Biz:3213213
</verb>
  , and for ext-acct:
<verb>
ACCT_INPUT_PACKETS:Local:213213
ACCT_INPUT_OCTETS:Local:32132132
ACCT_INPUT_PACKETS:Biz:21321
ACCT_INPUT_OCTETS:Biz:3213213
</verb>

  To simplify AAA integration mpd able to return specified traffic types
  using standatd RADIUS attributes. Required traffic type can be specified
  using mpd-input-acct/mpd-output-acct attributes.

</p>
