<!-- $Id: configfmt.sgml,v 1.11 2008/01/06 09:58:43 amotin Exp $ -->
<!-- mpd netgraph enabled user mode PPP daemon -->

<!-- <!DOCTYPE linuxdoc PUBLIC '-//FreeBSD//DTD linuxdoc//EN'> -->

  <sect><heading>Configuration file format<label id="configfmt"></heading>

<p>
Mpd uses four different configuration files when it executes. These files
are described below.

<sect1><heading>General properties</heading>

<p>
For all of the configuration files, the following things are true:

<itemize>
	<item>
	Any line whose first character is a number sign
	(<tt>#</tt>) is considered a comment and is ignored.

	<item>
	Strings may be quoted using double quotes. The string
	is decoded according to normal C language rules.
</itemize>

<sect1><heading><tt>mpd.conf</tt></heading>

<p>
An <em>entry</em> consists of a <em>label</em> followed by a sequence of
mpd commands.
A label begins at the first column and ends with a colon
character. Commands are indented with a tab character
and follow the label on the next and subsequent lines.
</p>

<p>
Here is an example <tt>mpd.conf</tt> that contains a single
configuration <tt>client</tt> that defines a single bundle template <tt>B1</tt>
and one link <tt>L1</tt>:
<tscreen><verb>
#
# mpd.conf configuration file
#

client:
	create bundle template B1

	create link static L1 modem
	set modem device /dev/cuad0
	set modem speed 115200
	set modem script DialPeer
	set modem idle-script AnswerCall
	set modem var $DialPrefix "DT"
	set modem var $Telephone "1234567"
	set link no pap chap eap
	set link accept pap
	set auth authname "MyLogin"
	set auth password "MyPassword"
	set link max-redial 0
	set link action bundle B1
	open
</verb></tscreen>

Commands are independant and executed one by one as if they were
entered using console. Most command operation depends on the active
context, which includes currently active link, bundle and repeater.
Information about active context is shown at the console command prompt.
Some commands, like <tt>link</tt>, <tt>bundle</tt>, <tt>repeater</tt>
and <tt>create</tt> can change this context.

<sect1><heading><tt>mpd.secret</tt></heading>

<p>
	This file contains login, password pairs, one entry per line.
	Each entry may have an optional third argument, which is
	an IP address with optional netmask width. This is used
	when netgotiating IP addresses with the corresponding peer.
	We restrict the allowable IP addresses we'll assign to the
	peer to lie within the specified range.
</p>

<p>
	In the example below, we define two ISP accounts that we
	use to connect to the Internet. Also, we have three friends
	who are allowed to connect to us, and we want to restrict
	the IP addresses that we'll let them have. Finally, the last
	user's password is retrieved by an external program.
<tscreen><verb>
#
# mpd.secret configuration file
#

# my two ISP accounts
mylogin1    password1
mylogin2    "Xka \r\n"

# my three friends
bob         "akd\"ix23"   192.168.1.100
jerry       "33dk88kz3"   192.168.1.101
phil        "w*d9m&_4X"   192.168.1.128/25

# An external password access program
gregory     "!/usr/local/etc/mpd/get_passwd.sh"
</verb></tscreen>
	Here <tt>bob</tt> and <tt>jerry</tt> must negotiate 
	<tt>192.168.1.100</tt> and <tt>192.168.1.101</tt>,
	respectively, while <tt>phil</tt> can ask for any
	address from <tt>192.168.1.128</tt> through <tt>192.168.1.255</tt>.
</p>

<p>
The leading ``!'' means that the password for user <tt>gregory</tt> is not
stored in the <tt>mpd.secret</tt> file directly.  Instead, the
named program is run with the username being authenticated as an
additional argument (so in this case the command line would be
``<tt>/usr/local/etc/mpd/get_passwd.sh gregory</tt>''). The command string
may include initial, fixed arguments as well. This program
should print the plaintext password for the named user as a
single line to standard output, and then exit.  <tt>Mpd</tt> will block
for this operation, so the program should respond and exit quickly.
If there is an error, the command should print an empty line, or just not
print anything.
</p>

<p>
As a special case, if the username in the <tt>mpd.secret</tt> file
is ``*'', then this line must be last as it matches any username.
Then it is up to the external program to determine whether the
username is valid. This wildcard matching only works for ``!'' lines.
</p>

<p>
The total length of the executed command must be less than 128
characters.  The program is run as the same user who runs
<tt>mpd</tt>, which is usually <tt>root</tt>, so the usual
care should be taken with scripts run as root, e.g., make sure the
script is not world-readable or world-writable.  Standard input and
standard error are inherited from the parent <tt>mpd</tt> process.
Note that any additional arguments will be visible to users on the
local machine running <tt>ps(1)</tt>.
</p>

<sect1><heading><tt>mpd.script</tt></heading>

<p>
This file has a format similar to <tt>mpd.conf</tt>,
but it contains chat script commands instead of 
mpd commands. Each line contains a single command, and
labels identify starting points and/or subroutines
in the script.

See <ref id="chat" name="Chat Scripting">
for a complete decscription of chat scripting.
</p>


