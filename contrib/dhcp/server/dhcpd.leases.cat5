dhcpd.leases(5)                                                dhcpd.leases(5)



NNAAMMEE
       dhcpd.leases ‐ DHCP client lease database

DDEESSCCRRIIPPTTIIOONN
       The  Internet  Software Consortium DHCP Server keeps a persistent data‐
       base of leases that it has assigned.   This  database  is  a  free‐form
       ASCII  file  containing  a  series of lease declarations.  Every time a
       lease is acquired, renewed or released, its new value  is  recorded  at
       the end of the lease file.  So if more than one declaration appears for
       a given lease, the last one in the file is the current one.

       When dhcpd is first installed, there is no lease  database.    However,
       dhcpd  requires  that a lease database be present before it will start.
       To make the initial lease database, just create an  empty  file  called
       /var/db/dhcpd.leases.

       In  order to prevent the lease database from growing without bound, the
       file is rewritten from time to time.   First, a temporary  lease  data‐
       base  is created and all known leases are dumped to it.   Then, the old
       lease database is renamed /var/db/dhcpd.leases~.   Finally,  the  newly
       written lease database is moved into place.

       There is a window of vulnerability where if the dhcpd process is killed
       or the system crashes after the old lease database has been renamed but
       before  the  new  one  has  been  moved  into  place,  there will be no
       /var/db/dhcpd.leases.   In this case, dhcpd will refuse to  start,  and
       will  require  manual  intervention.   DDOO NNOOTT simply create a new lease
       file when this happens ‐ if you do, you will lose all  your  old  bind‐
       ings,  and chaos will ensue.   Instead, rename /var/db/dhcpd.leases~ to
       /var/db/dhcpd.leases, restoring the old, valid  lease  file,  and  then
       start  dhcpd.    This  guarantees  that  a  valid  lease  file  will be
       restored.

FFOORRMMAATT
       Lease descriptions are stored in a format that is parsed  by  the  same
       recursive   descent   parser   used   to  read  the  ddhhccppdd..ccoonnff((55))  and
       ddhhcclliieenntt..ccoonnff((55)) files.   Currently, the only declaration that is  used
       in the dhcpd.leases file is the lleeaassee declaration.

        lleeaassee _i_p_‐_a_d_d_r_e_s_s {{ _s_t_a_t_e_m_e_n_t_s_._._. }}

       Each  lease  declaration  include  the  single IP address that has been
       leased to the client.   The statements within  the  braces  define  the
       duration of the lease and to whom it is assigned.

       The start and end time of a lease are recorded using the ‘‘starts’’ and
       ‘‘ends’’ statements:

         ssttaarrttss _d_a_t_e;;
         eennddss _d_a_t_e;;

       Dates are specified as follows:

        _w_e_e_k_d_a_y _y_e_a_r//_m_o_n_t_h//_d_a_y _h_o_u_r::_m_i_n_u_t_e::_s_e_c_o_n_d

       The weekday is present to make it easy for a human to tell when a lease
       expires  ‐ it’s specified as a number from zero to six, with zero being
       Sunday.  The day of week is ignored on input.  The  year  is  specified
       with  the  century,  so  it  should generally be four digits except for
       really long leases.  The month is specified as a number starting with 1
       for  January.  The day of the month is likewise specified starting with
       1.  The hour is a number between 0 and 23, the minute a number  between
       0 and 59, and the second also a number between 0 and 59.

       Lease  times  are  specified  in  Greenwich Mean Time (GMT), not in the
       local time zone.   Since Greenwich is actually on Daylight Savings Time
       part  of  the  year,  there  is probably nowhere in the world where the
       times recorded on a lease are always the same as wall clock times.   On
       a  unix  machine,  one  can often figure out the current time in GMT by
       typing ddaattee ‐‐uu.

       The MAC address of the network interface that was used to  acquire  the
       lease is recorded with the hhaarrddwwaarree statement:

        hhaarrddwwaarree _h_a_r_d_w_a_r_e_‐_t_y_p_e _m_a_c_‐_a_d_d_r_e_s_s;;

       The  MAC address is specified as a series of hexadecimal octets, seper‐
       ated by colons.

       If the client used a client identifier  to  acquire  its  address,  the
       client identifier is recorded using the uuiidd statement:

        uuiidd _c_l_i_e_n_t_‐_i_d_e_n_t_i_f_i_e_r;;

       The  client  identifier  is recorded as a series of hexadecimal octets,
       regardless of whether the client specifies an ASCII string or uses  the
       newer hardware type/MAC address format.

       If  the  client  sends  a hostname using the _C_l_i_e_n_t _H_o_s_t_n_a_m_e option, as
       specified in some versions of  the  DHCP‐DNS  Interaction  draft,  that
       hostname is recorded using the cclliieenntt‐‐hhoossttnnaammee statement.

        cclliieenntt‐‐hhoossttnnaammee ""_h_o_s_t_n_a_m_e"";;

       If  the client sends its hostname using the _H_o_s_t_n_a_m_e option, as Windows
       95 does, it is recorded using the hhoossttnnaammee statement.

        hhoossttnnaammee ""_h_o_s_t_n_a_m_e"";;

       The DHCP server may determine that a lease has  been  misused  in  some
       way, either because a client that has been assigned a lease NAKs it, or
       because the server’s own attempt to see if an address is in  use  prior
       to  reusing it reveals that the address is in fact already in use.   In
       that case, the aabbaannddoonneedd statement will be used to  indicate  that  the
       lease should not be reassigned.

        aabbaannddoonneedd;;

       Abandoned  leases are reclaimed automatically.   When a client asks for
       a new address, and the server finds that there are no new addresses, it
       checks  to  see  if  there  are any abandoned leases, and allocates the
       least recently abandoned lease.   The standard mechanisms for  checking
       for  lease  address  conflicts  are still followed, so if the abandoned
       lease’s IP address is still in use, it will be reabandoned.

       If a client rreeqquueessttss an abandoned address, the server assumes that  the
       reason the address was abandoned was that the lease file was corrupted,
       and that the client is the machine that responded when  the  lease  was
       probed,  causing  it  to  be  abandoned.   In that case, the address is
       immediately assigned to the client.

FFIILLEESS
       //vvaarr//ddbb//ddhhccppdd..lleeaasseess

SSEEEE AALLSSOO
       dhcpd(8), dhcp‐options(5), dhcpd.conf(5), RFC2132, RFC2131.

AAUUTTHHOORR
       ddhhccppdd((88)) was written by Ted Lemon  <mellon@vix.com>  under  a  contract
       with  Vixie Labs.   Funding for this project was provided by the Inter‐
       net Software Corporation.  Information about the Internet Software Con‐
       sortium can be found at hhttttpp::////wwwwww..iisscc..oorrgg//iisscc..



                                                               dhcpd.leases(5)
